
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.analizadorSintactico;

import java.util.ArrayList;
import java.util.List;

import analizadores.analizadorLexico.Analizador;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import modelos.ErrorDeEntrada;
import modelos.Grafica;
import modelos.GraficaBarra;
import modelos.GraficaPie;
import modelos.OcurrenciaMatematica;
import modelos.Unir;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class ParserPrimeraPractica extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public ParserPrimeraPractica() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public ParserPrimeraPractica(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public ParserPrimeraPractica(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\065\000\002\002\006\000\002\002\004\000\002\002" +
                            "\004\000\002\011\005\000\002\011\005\000\002\011\004" +
                            "\000\002\012\005\000\002\012\002\000\002\012\004\000" +
                            "\002\013\010\000\002\013\007\000\002\013\004\000\002" +
                            "\006\007\000\002\006\011\000\002\006\010\000\002\006" +
                            "\011\000\002\006\003\000\002\006\004\000\002\014\003" +
                            "\000\002\014\005\000\002\014\004\000\002\015\004\000" +
                            "\002\015\004\000\002\007\005\000\002\007\003\000\002" +
                            "\007\004\000\002\021\003\000\002\003\005\000\002\003" +
                            "\005\000\002\003\003\000\002\004\005\000\002\004\005" +
                            "\000\002\004\003\000\002\005\005\000\002\005\003\000" +
                            "\002\005\003\000\002\016\007\000\002\016\011\000\002" +
                            "\016\004\000\002\010\007\000\002\010\011\000\002\010" +
                            "\011\000\002\010\010\000\002\010\007\000\002\010\007" +
                            "\000\002\010\007\000\002\010\003\000\002\010\004\000" +
                            "\002\017\003\000\002\017\003\000\002\017\004\000\002" +
                            "\020\003\000\002\020\004"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\224\000\006\003\004\004\ufffa\001\002\000\006\004" +
                            "\225\027\226\001\002\000\004\002\224\001\002\000\004" +
                            "\004\007\001\002\000\010\003\011\005\012\006\013\001" +
                            "\002\000\010\003\207\004\ufffb\027\210\001\002\000\004" +
                            "\036\206\001\002\000\004\035\150\001\002\000\004\035" +
                            "\014\001\002\000\024\003\023\007\015\012\016\013\021" +
                            "\014\024\015\022\016\020\017\026\036\017\001\002\000" +
                            "\004\037\144\001\002\000\004\037\131\001\002\000\010" +
                            "\003\uffd3\004\uffd3\027\uffd3\001\002\000\004\037\122\001" +
                            "\002\000\004\037\103\001\002\000\004\037\073\001\002" +
                            "\000\004\004\072\001\002\000\004\037\033\001\002\000" +
                            "\010\003\ufffd\004\ufffd\027\ufffd\001\002\000\004\037\027" +
                            "\001\002\000\004\040\030\001\002\000\004\031\031\001" +
                            "\002\000\024\003\023\007\015\012\016\013\021\014\024" +
                            "\015\022\016\020\017\026\036\017\001\002\000\010\003" +
                            "\uffd4\004\uffd4\027\uffd4\001\002\000\004\033\034\001\002" +
                            "\000\006\003\035\035\037\001\002\000\004\004\071\001" +
                            "\002\000\004\034\066\001\002\000\010\026\045\041\046" +
                            "\042\043\001\002\000\026\003\uffe1\022\uffe1\023\uffe1\024" +
                            "\uffe1\025\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\036\uffe1" +
                            "\001\002\000\026\003\uffe4\022\uffe4\023\uffe4\024\055\025" +
                            "\054\030\uffe4\031\uffe4\032\uffe4\034\uffe4\036\uffe4\001\002" +
                            "\000\020\003\uffe7\022\050\023\052\031\uffe7\032\uffe7\034" +
                            "\uffe7\036\uffe7\001\002\000\026\003\uffde\022\uffde\023\uffde" +
                            "\024\uffde\025\uffde\030\uffde\031\uffde\032\uffde\034\uffde\036" +
                            "\uffde\001\002\000\004\032\061\001\002\000\010\026\045" +
                            "\041\046\042\043\001\002\000\026\003\uffdf\022\uffdf\023" +
                            "\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf\032\uffdf\034\uffdf" +
                            "\036\uffdf\001\002\000\010\022\050\023\052\030\051\001" +
                            "\002\000\010\026\045\041\046\042\043\001\002\000\026" +
                            "\003\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0\031" +
                            "\uffe0\032\uffe0\034\uffe0\036\uffe0\001\002\000\010\026\045" +
                            "\041\046\042\043\001\002\000\026\003\uffe5\022\uffe5\023" +
                            "\uffe5\024\055\025\054\030\uffe5\031\uffe5\032\uffe5\034\uffe5" +
                            "\036\uffe5\001\002\000\010\026\045\041\046\042\043\001" +
                            "\002\000\010\026\045\041\046\042\043\001\002\000\026" +
                            "\003\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\030\uffe3\031" +
                            "\uffe3\032\uffe3\034\uffe3\036\uffe3\001\002\000\026\003\uffe2" +
                            "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2\031\uffe2\032" +
                            "\uffe2\034\uffe2\036\uffe2\001\002\000\026\003\uffe6\022\uffe6" +
                            "\023\uffe6\024\055\025\054\030\uffe6\031\uffe6\032\uffe6\034" +
                            "\uffe6\036\uffe6\001\002\000\010\026\045\041\046\042\043" +
                            "\001\002\000\004\036\063\001\002\000\006\032\064\034" +
                            "\uffdd\001\002\000\006\003\035\035\037\001\002\000\004" +
                            "\034\uffdc\001\002\000\004\031\067\001\002\000\024\003" +
                            "\023\007\015\012\016\013\021\014\024\015\022\016\020" +
                            "\017\026\036\017\001\002\000\010\003\uffd9\004\uffd9\027" +
                            "\uffd9\001\002\000\004\034\uffdb\001\002\000\010\003\uffd2" +
                            "\004\uffd2\027\uffd2\001\002\000\010\003\075\020\074\021" +
                            "\077\001\002\000\004\031\uffd1\001\002\000\004\004\102" +
                            "\001\002\000\004\031\100\001\002\000\004\031\uffd0\001" +
                            "\002\000\024\003\023\007\015\012\016\013\021\014\024" +
                            "\015\022\016\020\017\026\036\017\001\002\000\010\003" +
                            "\uffd6\004\uffd6\027\uffd6\001\002\000\004\031\uffcf\001\002" +
                            "\000\004\033\104\001\002\000\012\003\106\026\045\041" +
                            "\046\042\043\001\002\000\004\031\120\001\002\000\004" +
                            "\004\117\001\002\000\010\003\112\032\110\034\111\001" +
                            "\002\000\010\026\045\041\046\042\043\001\002\000\004" +
                            "\031\uffe9\001\002\000\004\004\114\001\002\000\004\031" +
                            "\uffec\001\002\000\004\031\uffe8\001\002\000\010\003\112" +
                            "\032\110\034\111\001\002\000\004\031\uffea\001\002\000" +
                            "\004\031\uffeb\001\002\000\024\003\023\007\015\012\016" +
                            "\013\021\014\024\015\022\016\020\017\026\036\017\001" +
                            "\002\000\010\003\uffd7\004\uffd7\027\uffd7\001\002\000\012" +
                            "\003\123\026\045\041\046\042\043\001\002\000\004\004" +
                            "\130\001\002\000\004\031\126\001\002\000\004\031\uffce" +
                            "\001\002\000\024\003\023\007\015\012\016\013\021\014" +
                            "\024\015\022\016\020\017\026\036\017\001\002\000\010" +
                            "\003\uffd5\004\uffd5\027\uffd5\001\002\000\004\031\uffcd\001" +
                            "\002\000\004\033\132\001\002\000\006\003\134\040\135" +
                            "\001\002\000\004\034\141\001\002\000\004\004\140\001" +
                            "\002\000\006\032\136\034\uffef\001\002\000\006\003\134" +
                            "\040\135\001\002\000\004\034\uffee\001\002\000\004\034" +
                            "\uffed\001\002\000\004\031\142\001\002\000\024\003\023" +
                            "\007\015\012\016\013\021\014\024\015\022\016\020\017" +
                            "\026\036\017\001\002\000\010\003\uffd8\004\uffd8\027\uffd8" +
                            "\001\002\000\004\040\145\001\002\000\004\031\146\001" +
                            "\002\000\024\003\023\007\015\012\016\013\021\014\024" +
                            "\015\022\016\020\017\026\036\017\001\002\000\010\003" +
                            "\uffda\004\uffda\027\uffda\001\002\000\016\003\153\007\151" +
                            "\010\157\011\155\014\152\036\154\001\002\000\004\037" +
                            "\202\001\002\000\004\037\174\001\002\000\004\004\173" +
                            "\001\002\000\010\003\ufff1\004\ufff1\027\ufff1\001\002\000" +
                            "\004\037\166\001\002\000\010\003\ufffe\004\ufffe\027\ufffe" +
                            "\001\002\000\004\037\160\001\002\000\004\033\161\001" +
                            "\002\000\006\003\134\040\135\001\002\000\004\034\163" +
                            "\001\002\000\004\031\164\001\002\000\016\003\153\007" +
                            "\151\010\157\011\155\014\152\036\154\001\002\000\010" +
                            "\003\ufff4\004\ufff4\027\ufff4\001\002\000\004\033\167\001" +
                            "\002\000\012\003\106\026\045\041\046\042\043\001\002" +
                            "\000\004\031\171\001\002\000\016\003\153\007\151\010" +
                            "\157\011\155\014\152\036\154\001\002\000\010\003\ufff3" +
                            "\004\ufff3\027\ufff3\001\002\000\010\003\ufff0\004\ufff0\027" +
                            "\ufff0\001\002\000\004\033\175\001\002\000\006\003\035" +
                            "\035\037\001\002\000\004\034\177\001\002\000\004\031" +
                            "\200\001\002\000\016\003\153\007\151\010\157\011\155" +
                            "\014\152\036\154\001\002\000\010\003\ufff2\004\ufff2\027" +
                            "\ufff2\001\002\000\004\040\203\001\002\000\004\031\204" +
                            "\001\002\000\016\003\153\007\151\010\157\011\155\014" +
                            "\152\036\154\001\002\000\010\003\ufff5\004\ufff5\027\ufff5" +
                            "\001\002\000\010\003\ufffc\004\ufffc\027\ufffc\001\002\000" +
                            "\004\027\223\001\002\000\004\026\217\001\002\000\006" +
                            "\002\001\027\212\001\002\000\004\026\213\001\002\000" +
                            "\004\040\214\001\002\000\004\030\215\001\002\000\004" +
                            "\031\216\001\002\000\006\002\ufff8\027\ufff8\001\002\000" +
                            "\004\040\220\001\002\000\004\030\221\001\002\000\004" +
                            "\031\222\001\002\000\006\002\ufff7\027\ufff7\001\002\000" +
                            "\006\002\ufff6\027\ufff6\001\002\000\004\002\000\001\002" +
                            "\000\004\004\ufff9\001\002\000\004\002\uffff\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\224\000\006\002\004\012\005\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\011\007" +
                            "\001\001\000\004\013\210\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\010\024\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\010\031" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
                            "\035\001\001\000\002\001\001\000\002\001\001\000\012" +
                            "\003\041\004\040\005\037\021\043\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\010\003\046\004\040\005\037\001" +
                            "\001\000\002\001\001\000\002\001\001\000\006\004\057" +
                            "\005\037\001\001\000\002\001\001\000\006\004\052\005" +
                            "\037\001\001\000\002\001\001\000\004\005\056\001\001" +
                            "\000\004\005\055\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\012\003\041\004\040\005\037" +
                            "\021\061\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\016\064\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\010\067\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\017\075\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\010\100\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\014\003\041\004\040\005" +
                            "\037\015\104\021\106\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\007\112\001\001\000\012\003\041\004" +
                            "\040\005\037\021\114\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
                            "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\010\120\001\001\000\002\001\001\000\014\003\041\004" +
                            "\040\005\037\020\123\021\124\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\010\126\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\014\132\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\014\136\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
                            "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\010\146\001\001\000\002\001\001\000" +
                            "\004\006\155\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\014\161\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\006\164\001\001\000\002\001\001\000\002\001\001" +
                            "\000\014\003\041\004\040\005\037\015\167\021\106\001" +
                            "\001\000\002\001\001\000\004\006\171\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
                            "\175\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\006\200\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\006\204\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$ParserPrimeraPractica$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$ParserPrimeraPractica$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws Exception {
        /* call code in generated class */
        return action_obj.CUP$ParserPrimeraPractica$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 1;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    public ArrayList<ErrorDeEntrada> errores = new ArrayList<>();    //listado de errores que posiblemente hayan
    public ArrayList<Double> ejeY = new ArrayList<>();    //listados de los ejeY de la grafica que se este evaluando
    public ArrayList<String> ejeX = new ArrayList<>();    //listado de los ejeX de la grafica que se esta evaluando actualmente
    public ArrayList<Grafica> graficas = new ArrayList<>();    //listado de las graficas que han sido aceptadas
    public ArrayList<Unir> uniones = new ArrayList<>();    //listado de las uniones de la grafica que se este evaluando
    public ArrayList<String> etiquetas = new ArrayList<>();    //etiquetas que iran a la grafica de pie
    public ArrayList<String> ejecutar = new ArrayList<>();    //listado de los titulos de las graficas que se ejecutaran
    public ArrayList<Double> valores = new ArrayList<>();    //valores de la grafica
    public ArrayList<OcurrenciaMatematica> ocurrencias = new ArrayList<>();    //listado de todas las operaciones matematicas que ppueden haber
    public String titulo = "";    //titulo del agrafica
    public String tipo = "";    //tipo de la grafica de pie
    public double total = 0.0;    //total de la grafica de pie
    public String extra = "";    //extra de la grafica de pie
    public int totalPie = 0;    //contador que llevara la cantidad de graficas de pie
    public int totalBarra = 0;    //contador que llevara la cantidad de graficas de barras

    //constructor de la clase que acepta un lexer
    public ParserPrimeraPractica(Analizador analizador) {
        super(analizador);
    }

    public void guardarEjeY(String[] valoresEjeY) {
        for (int x = 0; x < valoresEjeY.length; x++) {
            double valorEjeY = Double.parseDouble(valoresEjeY[x]);
            ejeY.add(valorEjeY);
        }
    }

    public void guardarEjeX(String[] valoresEjeX) {
        for (int x = 0; x < valoresEjeX.length; x++) {
            String valorEjeX = valoresEjeX[x].toString();
            ejeX.add(valorEjeX);
        }
    }


    public void guardarEtiquetas(String[] etiquetas1) {
        for (int x = 0; x < etiquetas1.length; x++) {
            String etiqueta = etiquetas1[x].toString();
            etiquetas.add(etiqueta);
        }
    }

    public void guardarValores(String[] valores1) {
        for (int x = 0; x < valores1.length; x++) {
            double valor = Double.parseDouble(valores1[x]);
            valores.add(valor);
        }
    }

    public void crearGraficaBarras() {
        GraficaBarra graficaBarra = new GraficaBarra(new ArrayList<String>(ejeX),
                new ArrayList<Double>(ejeY), new String(titulo), new ArrayList<Unir>(uniones));
        graficas.add(graficaBarra);
        totalBarra++;
        formatearTodo();
    }

    public void crearGraficaPie() {
        GraficaPie graficaPie = new GraficaPie(new String(titulo), new ArrayList<>(uniones),
                new ArrayList<String>(etiquetas), new ArrayList<Double>(valores), new String(tipo),
                total, new String(extra));
        graficas.add(graficaPie);
        totalPie++;
        formatearTodo();
    }

    public void formatearTodo() {
        //volvemos todos los ints a 0 todos los string a vacio y limpiamos todos los arrays
        ejeY.clear();
        ejeX.clear();
        uniones.clear();
        etiquetas.clear();
        valores.clear();
        titulo = "";
        tipo = "";
        total = 0.0;
        extra = "";
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        String listadoDeTokensEsperados = "";
        List tokensEsperados = expected_token_ids();//mandamos a traer los tokens esperados
        for (int x = 0; x < tokensEsperados.size(); x++) {//iteramos dentro de los tokens esperados
            int valorEsperado = (Integer) tokensEsperados.get(x);//traemos el valor int que representa al token esperado segun la iteracion
            if (x == tokensEsperados.size() - 1) {//si estamos en la ultima posicion entonces no ponemos la coma al final
                listadoDeTokensEsperados += sym.terminalNames[valorEsperado] + ".";
            } else {
                listadoDeTokensEsperados += sym.terminalNames[valorEsperado] + " o ";//agregamos el nombre del token al listado mas una coma
            }
        }
        errores.add(new ErrorDeEntrada(cur_token.value.toString(), cur_token.left, cur_token.right, "Sintactico", "Se esperaba " + listadoDeTokensEsperados));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$ParserPrimeraPractica$actions {
        private final ParserPrimeraPractica parser;

        /**
         * Constructor
         */
        CUP$ParserPrimeraPractica$actions(ParserPrimeraPractica parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$ParserPrimeraPractica$do_action_part00000000(
                int CUP$ParserPrimeraPractica$act_num,
                java_cup.runtime.lr_parser CUP$ParserPrimeraPractica$parser,
                java.util.Stack CUP$ParserPrimeraPractica$stack,
                int CUP$ParserPrimeraPractica$top)
                throws Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$ParserPrimeraPractica$result;

            /* select the action based on the action number */
            switch (CUP$ParserPrimeraPractica$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // e ::= d DEF tipodegrafica f
                {
                    Object RESULT = null;

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // $START ::= e EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).value;
                    RESULT = start_val;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$ParserPrimeraPractica$parser.done_parsing();
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // e ::= error EJECUTAR
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // tipodegrafica ::= BARRAS LLAVEIZQUIERDA expresionbarras
                {
                    Object RESULT = null;
                    crearGraficaBarras();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("tipodegrafica", 7, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // tipodegrafica ::= PIE LLAVEIZQUIERDA expresionpie
                {
                    Object RESULT = null;
                    crearGraficaPie();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("tipodegrafica", 7, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // tipodegrafica ::= error LLAVEDERECHA
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("tipodegrafica", 7, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // d ::= d DEF tipodegrafica
                {
                    Object RESULT = null;

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("d", 8, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // d ::=
                {
                    Object RESULT = null;

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("d", 8, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // d ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("d", 8, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // f ::= f EJECUTAR PARENTESISIZQUIERDO PALABRA PARENTESISDERECHO PUNTOYCOMA
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    ejecutar.add(e1.toString().replaceAll("\"", ""));
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("f", 9, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 5)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // f ::= EJECUTAR PARENTESISIZQUIERDO PALABRA PARENTESISDERECHO PUNTOYCOMA
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    ejecutar.add(e1.toString().replaceAll("\"", ""));
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("f", 9, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 4)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // f ::= error EJECUTAR
                {
                    Object RESULT = null;

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("f", 9, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // expresionbarras ::= TITULO DOSPUNTOS PALABRA PUNTOYCOMA expresionbarras
                {
                    Object RESULT = null;
                    int tituloStringleft = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int tituloStringright = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object tituloString = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    titulo = tituloString.toString().replaceAll("\"", "");
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionbarras", 4, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 4)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // expresionbarras ::= EJEX DOSPUNTOS CORCHETEIZQUIERDO items CORCHETEDERECHO PUNTOYCOMA expresionbarras
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).value;

                    String[] valores = e1.toString().replaceAll("\"", "").split(",");//obtenemos el array con todos las etiquetas que representan al eje X
                    guardarEjeX(valores);//mandamos a guardar el ejeX

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionbarras", 4, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 6)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // expresionbarras ::= EJEY DOSPUNTOS CORCHETEIZQUIERDO valores PUNTOYCOMA expresionbarras
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;

                    String[] valores = e1.toString().split(",");//obtenemos el array con todos los numeros que representan al ejeY
                    guardarEjeY(valores);//mandamos a guardar el ejeY

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionbarras", 4, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 5)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // expresionbarras ::= UNIR DOSPUNTOS CORCHETEIZQUIERDO llaves CORCHETEDERECHO PUNTOYCOMA expresionbarras
                {
                    Object RESULT = null;

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionbarras", 4, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 6)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // expresionbarras ::= LLAVEDERECHA
                {
                    Object RESULT = null;

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionbarras", 4, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // expresionbarras ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionbarras", 4, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // items ::= PALABRA
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    RESULT = e1;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("items", 10, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // items ::= PALABRA COMA items
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    RESULT = e1 + "," + e2;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("items", 10, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // items ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("items", 10, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // valores ::= operacion coma
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    if (e2.toString().equals("-1")) {
                        RESULT = e1 + "";
                    } else {
                        RESULT = e1 + "," + e2;
                    }

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("valores", 11, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // valores ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("valores", 11, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // coma ::= COMA operacion coma
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    if (e2.toString().equals("-1")) {
                        RESULT = e1 + "";
                    } else {
                        RESULT = e1 + "," + e2;
                    }
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("coma", 5, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // coma ::= CORCHETEDERECHO
                {
                    Object RESULT = null;
                    RESULT = "-1";
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("coma", 5, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // coma ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("coma", 5, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // operacion ::= g
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    RESULT = e1;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("operacion", 15, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // g ::= g MAS h
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    ocurrencias.add(new OcurrenciaMatematica("Suma", cur_token.left, cur_token.right, e1 + "+" + e2));
                    RESULT = (double) e1 + (double) e2;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("g", 1, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // g ::= g MENOS h
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    ocurrencias.add(new OcurrenciaMatematica("Resta", cur_token.left, cur_token.right, e1 + "-" + e2));
                    RESULT = (double) e1 - (double) e2;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("g", 1, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // g ::= h
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    RESULT = e1;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("g", 1, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // h ::= h POR x
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    ocurrencias.add(new OcurrenciaMatematica("Multiplicación", cur_token.left, cur_token.right, e1 + "*" + e2));
                    RESULT = (double) e1 * (double) e2;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("h", 2, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // h ::= h DIAGONAL x
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    ocurrencias.add(new OcurrenciaMatematica("División", cur_token.left, cur_token.right, e1 + "/" + e2));
                    RESULT = (double) e1 / (double) e2;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("h", 2, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // h ::= x
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    RESULT = e1;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("h", 2, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // x ::= PARENTESISIZQUIERDO g PARENTESISDERECHO
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).value;
                    RESULT = e1;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("x", 3, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // x ::= ENTERO
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Double e1 = (Double) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    RESULT = e1;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("x", 3, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // x ::= DECIMAL
                {
                    Object RESULT = null;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Double e2 = (Double) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    RESULT = e2;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("x", 3, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // llaves ::= LLAVEIZQUIERDA operacion COMA operacion LLAVEDERECHA
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)).value;


                    Unir unir = new Unir((int) Double.parseDouble(e1.toString()), (int) Double.parseDouble(e2.toString()));//creamos el objeto unir
                    uniones.add(unir);//agregar el objeto unir al arrayList de unir


                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("llaves", 12, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 4)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // llaves ::= LLAVEIZQUIERDA operacion COMA operacion LLAVEDERECHA COMA llaves
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 5)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 5)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 5)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).value;

                    Unir unir = new Unir((int) Double.parseDouble(e1.toString()), (int) Double.parseDouble(e2.toString()));//creamos el objeto unir
                    uniones.add(unir);//agregar el objeto unir al arrayList de unir


                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("llaves", 12, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 6)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // llaves ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("llaves", 12, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // expresionpie ::= TITULO DOSPUNTOS PALABRA PUNTOYCOMA expresionpie
                {
                    Object RESULT = null;
                    int tituloStringleft = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int tituloStringright = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object tituloString = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;
                    titulo = tituloString.toString().replaceAll("\"", "");
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 4)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // expresionpie ::= UNIR DOSPUNTOS CORCHETEIZQUIERDO llaves CORCHETEDERECHO PUNTOYCOMA expresionpie
                {
                    Object RESULT = null;

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 6)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // expresionpie ::= ETIQUETA DOSPUNTOS CORCHETEIZQUIERDO items CORCHETEDERECHO PUNTOYCOMA expresionpie
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 3)).value;


                    String[] etiquetas = e1.toString().replaceAll("\"", "").split(",");//obtenemos el array con todos las etiquetas del pie
                    guardarEtiquetas(etiquetas);//mandamos a guardar las etiquetas


                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 6)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // expresionpie ::= VALORES DOSPUNTOS CORCHETEIZQUIERDO valores PUNTOYCOMA expresionpie
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;


                    String[] valores = e1.toString().split(",");//obtenemos el array con todos los numeros que van dentro del pie
                    guardarValores(valores);//mandamos a guardar los valores del pie

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 5)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // expresionpie ::= TIPO DOSPUNTOS tipo PUNTOYCOMA expresionpie
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;

                    if (e1.toString().equals("Cantidad")) {
                        tipo = "Cantidad";
                    } else {
                        tipo = "Porcentaje";
                    }

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 4)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // expresionpie ::= TOTAL DOSPUNTOS total PUNTOYCOMA expresionpie
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;

                    total = Double.parseDouble(e1.toString());

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 4)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // expresionpie ::= EXTRA DOSPUNTOS PALABRA PUNTOYCOMA expresionpie
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 2)).value;

                    extra = e1.toString().replaceAll("\"", "");

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 4)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // expresionpie ::= LLAVEDERECHA
                {
                    Object RESULT = null;

                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // expresionpie ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("expresionpie", 6, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // tipo ::= CANTIDAD
                {
                    Object RESULT = null;
                    RESULT = "Cantidad";
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("tipo", 13, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // tipo ::= PORCENTAJE
                {
                    Object RESULT = null;
                    RESULT = "Porcentaje";
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("tipo", 13, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // tipo ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("tipo", 13, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // total ::= operacion
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()).value;
                    RESULT = e1;
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("total", 14, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // total ::= error DEF
                {
                    Object RESULT = null;
                    formatearTodo();
                    CUP$ParserPrimeraPractica$result = parser.getSymbolFactory().newSymbol("total", 14, ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.elementAt(CUP$ParserPrimeraPractica$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserPrimeraPractica$stack.peek()), RESULT);
                }
                return CUP$ParserPrimeraPractica$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$ParserPrimeraPractica$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$ParserPrimeraPractica$do_action(
                int CUP$ParserPrimeraPractica$act_num,
                java_cup.runtime.lr_parser CUP$ParserPrimeraPractica$parser,
                java.util.Stack CUP$ParserPrimeraPractica$stack,
                int CUP$ParserPrimeraPractica$top)
                throws Exception {
            return CUP$ParserPrimeraPractica$do_action_part00000000(
                    CUP$ParserPrimeraPractica$act_num,
                    CUP$ParserPrimeraPractica$parser,
                    CUP$ParserPrimeraPractica$stack,
                    CUP$ParserPrimeraPractica$top);
        }
    }

}
